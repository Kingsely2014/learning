<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- 加载外部配置文件 -->
    <properties resource="config\mysql.properties"></properties>

    <!-- 设置缓存和延迟加载等等重要的运行时的行为方式 -->
    <!--<settings>-->
    <!--&lt;!&ndash; 该配置影响的所有映射器中配置的缓存的全局开关-->
    <!--PROPERTY:true|false;default:true &ndash;&gt;-->
    <!--<setting name="cacheEnabled" value="true "/>-->
    <!--&lt;!&ndash; 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态-->
    <!--PROPERTY:true|false;default:true &ndash;&gt;-->
    <!--<setting name="lazyLoadingEnabled" value="false"/>-->
    <!--&lt;!&ndash; 当启用时，带有延迟加载属性的对象的加载与否完全取决于对任意延迟属性的调用；反之，每种属性将会按需加载-->
    <!--PROPERTY:true|false;default:true&ndash;&gt;-->
    <!--<setting name="aggressiveLazyLoading" value="true"/>-->
    <!--&lt;!&ndash; 是否允许单一语句返回多结果（需要兼容驱动）-->
    <!--PROPERTY:true|false;default:true &ndash;&gt;-->
    <!--<setting name="multipleResultSetsEnabled" value="true"/>-->
    <!--&lt;!&ndash; 使用列标签代替列名。不同的驱动在这方面会有不用的表现，具体可参考相关驱动文档或用过测试这两种不同的模式来观察所用驱动的结果-->
    <!--PROPERTY:true|false;default:true &ndash;&gt;-->
    <!--<setting name="useColumnLabel" value="rrue"/>-->
    <!--&lt;!&ndash; 语序JDBC支持自动生成主键，需要驱动兼容。如果设置为true则这个试着强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）-->
    <!--PROPERTY:true|false;default:false &ndash;&gt;-->
    <!--<setting name="useGeneratedKeys" value="false"/>-->
    <!--&lt;!&ndash; 指定Mybatis是否以及如何自动映射指定的列到字段或属性。NONE标识取消自动映射；PARTIAL只会自动映射没有定义嵌套结果集映射的结果集。FULL会自动映射复杂的结果集（包括嵌套和其他情况）。-->
    <!--PROPERTY:NONE|PARTLAL|FULL &ndash;&gt;-->
    <!--<setting name="autoMappingBehavior" value="FULL"/>-->
    <!--&lt;!&ndash;配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）；BATCH 执行器将重用语句并执行批量更新。-->
    <!--PROPERTY:SIMPLE|REUSE|BATCH &ndash;&gt;-->
    <!--<setting name="defaultExecutorType" value="SIMPLE"/>-->
    <!--&lt;!&ndash;设置超时时间，它决定驱动等待数据库响应的秒数。&ndash;&gt;-->
    <!--<setting name="defaultStatementTimeout" value=""/>-->
    <!--&lt;!&ndash;允许在嵌套语句中使用行分界（RowBounds）。&ndash;&gt;-->
    <!--<setting name="safeRowBoundsEnabled" value=""/>-->
    <!--&lt;!&ndash;是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。&ndash;&gt;-->
    <!--<setting name="mapUnderscoreToCamelCase" value=""/>-->
    <!--&lt;!&ndash;MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。&ndash;&gt;-->
    <!--<setting name="localCacheScope" value=""/>-->
    <!--&lt;!&ndash;当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。&ndash;&gt;-->
    <!--<setting name="jdbcTypeForNull" value=""/>-->
    <!--&lt;!&ndash;指定哪个对象的方法触发一次延迟加载。&ndash;&gt;-->
    <!--<setting name="lazyLoadTriggerMethods" value=""/>-->
    <!--&lt;!&ndash;指定动态 SQL 生成的默认语言。&ndash;&gt;-->
    <!--<setting name="defaultScriptingLanguage" value=""/>-->
    <!--&lt;!&ndash;指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意原始类型（int、boolean等）是不能设置成 null 的。&ndash;&gt;-->
    <!--<setting name="callSettersOnNulls" value=""/>-->
    <!--&lt;!&ndash;指定 MyBatis 增加到日志名称的前缀。property:Any String-->
    <!--<setting name="logPrefix" value="Kingsely"/>-->
    <!--&lt;!&ndash;指定 MyBatis 所用日志的具体实现，未指定时将自动查找。-->
    <!--PROPERTY:SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING&ndash;&gt;-->
    <!--<setting name="logImpl" value="LOG4J"/>-->
    <!--&lt;!&ndash;为 Mybatis 用来创建具有延迟加载能力的对象设置代理工具。&ndash;&gt;-->
    <!--<setting name="proxyFactory" value=""/>-->
    <!--</settings>-->

    <!-- 别名 -->
    <typeAliases>
        <typeAlias alias="employeer" type="com.pojo.Employeer"/>
    </typeAliases>

    <!-- environments 标签中包含对事务管理和连接池的环境配置 -->
    <!-- default属性用来配置默认使用的环境id -->
    <environments default="development">
        <!-- 每个环境都有一个id值,用来在environments的default中使用 -->
        <environment id="development">
            <!-- 事务管理器,内置的有JDBC和MANAGED两种,也可以自定义 -->
            <transactionManager type="JDBC"></transactionManager>
            <!-- 数据源,内置的有UNPOOLED,POOLED和JNDI三种,也可以自定义 -->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--mapper映射器-->
    <mappers>
        <mapper resource="mapper\employeerMapper.xml"/>
    </mappers>

</configuration>